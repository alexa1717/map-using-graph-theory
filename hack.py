graph = {"11,141" :     ["65,142"],
          "859,132" :    ["695,154"],
          "72,27" :      ["65,142"],
          "65,142" :     ["11,141" , "375,153" , "59,279" , "72,27"],
          "402,26" :     ["375,153"],
          "375,153" :    ["65,142", "695,154","402,26","362,283"],
          "695,154" :    ["375,153","859,132","694,286"],
          "12,277":      ["59,279"],
          "59,279":      ["12,277","362,283","65,142","350,561"],
          "362,283":     ["59,279","375,153","558,285","356,422","694,286"],
          "558,285":     ["362,283","694,286"],
          "694,286" :    ["558,285","695,154","694,416"],
          "356,422" :    ["362,283", "694,416","350,561"],
          "694,416" :    ["694,286","847,464","356,422"],
          "350,561":     ["59,279","356,422","349,581"],
          "349,581" :    ["350,561"],
          "559,581" :    ["847,464"],
          "847,464" :    ["694,416" , "347,664"],
          "347,664" :    ["847,464" , "350,561"]

          }


# definition of function
def generate_edges(graph):
    edges = []

    # for each node in graph
    for node in graph:

        # for each neighbour node of a single node
         for neighbour in graph[node]:
             # if edge exits then append
             edges.append(node, neighbour)
    return edges

graph = { "11,141" :     ["65,142"],
          "859,132" :    ["695,154"],
          "72,27" :      ["65,142"],
          "65,142" :     ["11,141" , "375,153" , "59,279" , "72,27"],
          "402,26" :     ["375,153"],
          "375,153" :    ["65,142", "695,154","402,26","362,283"],
          "695,154" :    ["375,153","859,132","694,286"],
          "12,277":      ["59,279"],
          "59,279":      ["12,277","362,283","65,142","350,561"],
          "362,283":     ["59,279","375,153","558,285","356,422","694,286"],
          "558,285":     ["362,283","694,286"],
          "694,286" :    ["558,285","695,154","694,416"],
          "356,422" :    ["362,283", "694,416","350,561"],
          "694,416" :    ["694,286","847,464","356,422"],
          "350,561":     ["59,279","356,422","349,581"],
          "349,581" :    ["350,561"],
          "559,581" :    ["847,464"],
          "847,464" :    ["694,416" , "347,664"],
          "347,664" :    ["847,464" , "350,561"]

          }


#function to find path
def find_path(graph, start, end, path =[]):
    path = path + [start]
    if start == end:
        return path
    for node in graph[start]:
        if node not in path:
            newpath = find_path(graph, node, end, path)
            if newpath:
                return newpath
            return None

graph = {"11,141" :     ["65,142"],
          "859,132" :    ["695,154"],
          "72,27" :      ["65,142"],
          "65,142" :     ["11,141" , "375,153" , "59,279" , "72,27"],
          "402,26" :     ["375,153"],
          "375,153" :    ["65,142", "695,154","402,26","362,283"],
          "695,154" :    ["375,153","859,132","694,286"],
          "12,277":      ["59,279"],
          "59,279":      ["12,277","362,283","65,142","350,561"],
          "362,283":     ["59,279","375,153","558,285","356,422","694,286"],
          "558,285":     ["362,283","694,286"],
          "694,286" :    ["558,285","695,154","694,416"],
          "356,422" :    ["362,283", "694,416","350,561"],
          "694,416" :    ["694,286","847,464","356,422"],
          "350,561":     ["59,279","356,422","349,581"],
          "349,581" :    ["350,561"],
          "559,581" :    ["847,464"],
          "847,464" :    ["694,416" , "347,664"],
          "347,664" :    ["847,464" , "350,561"]

          }

# function to generate all possible path
def find_all_paths(graph, start, end, path =[]):
    path = path + [start]
    if start == end:
        return [path]
    paths = []
    for node in graph[start]:
        if node not in path:
                newpaths = find_all_paths(graph, node, end, path)
                for newpath in newpaths:
                     paths.append(newpath)
        return paths
# driver function call to print all
# generated paths
possible_paths= find_all_paths(graph, '375,153' , '558,285')
best_path=[]
best_len=99999999
for i in possible_paths:
    print(i)
    if len(i)<best_len:
        best_path=i
print(best_path)


# python program to generate shortest path
graph = { "11,141" :     ["65,142"],
          "859,132" :    ["695,154"],
          "72,27" :      ["65,142"],
          "65,142" :     ["11,141" , "375,153" , "59,279" , "72,27"],
          "402,26" :     ["375,153"],
          "375,153" :    ["65,142", "695,154","402,26","362,283"],
          "695,154" :    ["375,153","859,132","694,286"],
          "12,277":      ["59,279"],
          "59,279":      ["12,277","362,283","65,142","350,561"],
          "362,283":     ["59,279","375,153","558,285","356,422","694,286"],
          "558,285":     ["362,283","694,286"],
          "694,286" :    ["558,285","695,154","694,416"],
          "356,422" :    ["362,283", "694,416","350,561"],
          "694,416" :    ["694,286","847,464","356,422"],
          "350,561":     ["59,279","356,422","349,581"],
          "349,581" :    ["350,561"],
          "559,581" :    ["847,464"],
          "847,464" :    ["694,416" , "347,664"],
          "347,664" :    ["847,464" , "350,561"]

         }

# function to find the shortest path
def find_shortest_path(graph, start, end, path=[]):
    path = path + [start]
    if start == end:
        return path
    shortest = None
    for node in graph[start]:
        if node not in path:
            newpath = find_shortest_path(graph, node, end, path)
            if newpath:
                if not shortest or len(newpath) < len(shortest):
                    shortest = newpath
    return shortest


#driver function call to print
#the shortest path
print(find_shortest_path(graph, '375,153', '558,285'))